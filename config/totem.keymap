#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <170>;
};

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hold_tap_left: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37 22 23 24>;
        };

        hold_tap_right: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            bindings = <
           &kp Q                          &kp W                   &kp E                      &kp R                        &kp T      &kp Y      &kp U                          &kp I                        &kp O                    &kp P
           &hold_tap_left LEFT_COMMAND A  &hold_tap_left LCTRL S  &hold_tap_left LEFT_ALT D  &hold_tap_left LEFT_SHIFT F  &kp G      &kp H      &hold_tap_right RIGHT_SHIFT J  &hold_tap_right RIGHT_ALT K  &hold_tap_right RCTRL L  &hold_tap_right RIGHT_GUI SEMI
&kp GRAVE  &kp Z                          &kp X                   &kp C                      &kp V                        &kp B      &kp N      &kp M                          &kp COMMA                    &kp DOT                  &kp FSLH                        &kp SQT
                                                                  &kp LEFT_SHIFT             &lt 2 TAB                    &kp RET    &kp SPACE  &lt 1 ESC                      &kp BSPC
            >;
        };

        navnum {
            bindings = <
           &kp ASTERISK                       &kp N7                   &kp N8                      &kp N9                        &kp MINUS    &kp LS(LG(LEFT_BRACKET))  &kp PAGE_DOWN  &kp PAGE_UP    &kp LS(LG(RIGHT_BRACKET))  &kp K_SCROLL_UP
           &hold_tap_left LEFT_COMMAND SLASH  &hold_tap_left LCTRL N4  &hold_tap_left LEFT_ALT N5  &hold_tap_left LEFT_SHIFT N6  &kp PLUS     &kp LEFT                  &kp DOWN       &kp UP_ARROW   &kp RIGHT                  &kp RIGHT_GUI
&kp LCTRL  &kp PERCENT                        &kp N1                   &kp N2                      &kp N3                        &kp EQUAL    &kp LG(LEFT)              &kp LA(LEFT)   &kp LA(RIGHT)  &kp LG(RIGHT)              &kp K_SCROLL_DOWN  &none
                                                                       &mt LEFT_SHIFT PERIOD       &kp KP_NUMBER_0               &trans       &trans                    &trans         &trans
            >;
        };

        sym {
            bindings = <
       &kp EXCL          &kp AT                       &kp LEFT_BRACE                            &kp RIGHT_BRACE                              &kp PERCENT      &kp CARET        &kp AMPS         &kp ASTRK      &kp RA(NUMBER_3)  &kp RS(N3)
       &kp LEFT_COMMAND  &hold_tap_left LCTRL DOLLAR  &hold_tap_left LEFT_ALT LEFT_PARENTHESIS  &hold_tap_left LEFT_SHIFT RIGHT_PARENTHESIS  &kp BACKSLASH    &kp EXCLAMATION  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RCTRL         &kp RIGHT_GUI
&none  &kp MINUS         &kp CARET                    &kp LEFT_BRACKET                          &kp RIGHT_BRACKET                            &kp PIPE         &kp PERCENT      &kp TILDE        &kp LT         &kp GT            &kp PLUS       &kp EQUAL
                                                      &trans                                    &trans                                       &trans           &kp MINUS        &trans           &kp DELETE
            >;
        };

        func {
            bindings = <
       &none  &kp F7  &kp F8  &kp F9  &kp F12    &none  &kp K_PREV                     &kp K_PLAY_PAUSE       &kp K_NEXT             &none
       &none  &kp F4  &kp F5  &kp F6  &kp F11    &none  &mt RIGHT_SHIFT C_VOLUME_DOWN  &mt RIGHT_ALT K_MUTE   &mt RCTRL C_VOLUME_UP  &kp RIGHT_COMMAND
&none  &none  &kp F1  &kp F2  &kp F3  &kp F10    &none  &kp C_BRIGHTNESS_DEC           &kp C_BRIGHTNESS_AUTO  &kp C_BRIGHTNESS_INC   &none              &none
                      &none   &trans  &none      &none  &trans                         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Func {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};


