#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    quick-tap-ms = <100>;
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <23 24>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <21 22>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <0 1>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <1 2>;
        };

        paste-no-format {
            bindings = <&kp LG(LA(LS(V)))>;
            key-positions = <24 23 22>;
        };
    };

    behaviors {
        hold_tap_left: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37 22 23 24>;
        };

        hold_tap_right: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };

        hold_pref_tap: hold_pref_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREF_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            bindings = <
                 &kp Q  &kp W                   &kp E                            &kp R                  &kp T             &kp Y       &kp U                   &kp I                        &kp O                    &kp P
                 &kp A  &hold_tap_left LCTRL S  &hold_tap_left LEFT_ALT D        &hold_tap_left LCMD F  &kp G             &kp H       &hold_tap_right LCMD J  &hold_tap_right RIGHT_ALT K  &hold_tap_right RCTRL L  &kp SEMICOLON
&mt LCTRL GRAVE  &kp Z  &kp X                   &kp C                            &kp V                  &kp B             &kp N       &kp M                   &kp COMMA                    &kp DOT                  &kp FSLH       &kp SQT
                                                &hold_pref_tap LEFT_COMMAND ESC  &lt 2 TAB              &kp LEFT_SHIFT    &kp RETURN  &lt 1 SPACE             &mt RCMD BACKSPACE
            >;
        };

        nav {
            bindings = <
       &none           &none      &none                    &none            &none     &none         &kp LS(LG(LEFT_BRACKET))  &none          &kp LS(LG(RIGHT_BRACKET))  &kp PAGE_UP
       &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT             &kp LCMD         &none     &kp LEFT      &kp DOWN                  &kp UP_ARROW   &kp RIGHT                  &none
&none  &none           &none      &none                    &none            &none     &kp LG(LEFT)  &kp LA(LEFT)              &kp LA(RIGHT)  &kp LG(RIGHT)              &kp PAGE_DOWN  &none
                                  &mt LEFT_COMMAND PERIOD  &kp KP_NUMBER_0  &trans    &none         &trans                    &none
            >;
        };

        sym {
            bindings = <
                &kp EXCLAMATION             &kp AT_SIGN                     &kp LBRC                                  &kp RBRC                               &kp PERCENT    &kp CARET     &kp N7                   &kp N8                        &kp N9                    &kp MINUS
                &hold_tap_left LSHFT GRAVE  &hold_tap_left LCTRL BACKSLASH  &hold_tap_left LEFT_ALT LEFT_PARENTHESIS  &hold_tap_left LCMD RIGHT_PARENTHESIS  &kp PIPE       &kp ASTERISK  &hold_tap_right RCMD N4  &hold_tap_right RIGHT_ALT N5  &hold_tap_right RCTRL N6  &hold_tap_right RIGHT_SHIFT PLUS
&kp LA(RS(N3))  &kp HASH                    &kp DOLLAR                      &kp LBKT                                  &kp RBKT                               &kp AMPS       &kp QUESTION  &kp N1                   &kp N2                        &kp N3                    &kp EQUAL                         &kp BACKSLASH
                                                                            &none                                     &trans                                 &none          &kp MINUS     &kp PERIOD               &mt RCMD N0
            >;
        };

        func {
            bindings = <
            &none           &kp K_PREV          &kp K_PP             &kp K_NEXT         &kp LS(LC(LG(N4)))    &none  &kp F7  &kp F8  &kp F9  &kp F12
            &kp LEFT_SHIFT  &mt LCTRL C_VOL_DN  &mt LEFT_ALT K_MUTE  &mt LCMD C_VOL_UP  &kp LG(LS(N4))        &none  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_PRV  &none           &kp C_BRI_DEC       &none                &kp C_BRI_UP       &none                 &none  &kp F1  &kp F2  &kp F3  &kp F10  &bt BT_NXT
                                                &none                &trans             &none                 &none  &trans  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Func {
            if-layers = <1 3>;
            then-layer = <3>;
        };
    };
};
